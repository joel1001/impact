
import React from "react";
import "./tabNavbar.css";

const TabNavbar = (props) => {
   const {tabHeaders, tabDefaultActive, tabIndividualTemplateType, tabsContent, onElementClick, tabColorsNames, tabContentDefaultActive, tabMosaicImages, infoAndDescriptionsPerTab} = props;




    props comes from this component call functionalities and data clear is comming from parent
    tabHeaders --> brings an array of the tabs that user needs
    tabDefaultActive --> that means the active tab by default to be highlighted in the UI
    tabIndividualTemplateType --> we use this variable as flag to ask what kind of view the user wants right now we have 'color-palette', 'overlap', "mosaic" if you want to add more templates you need to create them
    tabsContent --> is going to have the data we want to show corresponding to the data make sure to send the correponding data in the arrays positions
    onElementClick --> it is call back function is being trigger in the call of this component ehat this function does is basically ativate and desactivate css visoble or non visble classes that corresponds to user selection
    tabColorsNames --> and array with colors names that you'll use foe the template 'color-palette'
    tabContentDefaultActive --> this variable works to highlight in UI the the selection option by default
    tabMosaicImages --> in case of mosaic template you can send an array of tabMosaicImages
    infoAndDescriptionsPerTab --> array of DOM elements with nessesary info


   return(
    <div className="idc-tab-nav">
       <div className="idc-tab-headers">
         {
            tabHeaders && tabHeaders.map((header, index)=>{
               return(
                  <div key={index} className="idc-tab-nav-content">                  
                     <div onClick={() => {onElementClick(index, '', '', ".idc-tab-headers-section", "idc-tab-active", ".idc-tab-content-box", "idc-visible-content", ".idc-product-info", "idc-product-info-visible", ".idc-button", "idc-buttons-visible")}} className={`idc-tab-headers-section ${tabDefaultActive == index ? " idc-tab-active" : ""}`}>{header}</div>
                     <div className={`idc-template-${tabIndividualTemplateType[index]} idc-tab-content`}>
                     </div>
                  </div>
               )   
            })
         }
      </div>
      <div className="idc-tab-cointains">
         {
           tabsContent.map((content, a) => (
               tabIndividualTemplateType[a] == 'color-palette' ? 
                  <div className={`idc-tab-content-box ${tabContentDefaultActive == a ? "idc-visible-content" : ""}`}>
                     {console.log("tabsContent", tabsContent)}

                     {
                        content.map((color, b) => {
                           return (
                              <div key={b} className={`idc-tab-color ${tabContentDefaultActive == b ? "idc-option-active" : ""}`} onClick={() =>  {onElementClick(b, "Color", tabColorsNames[b], ".idc-tab-color", "idc-option-active")}} style={{backgroundColor: color}}></div>
                           )
                        })
                     } 
                  </div>
               :
               <div className={`idc-tab-content-box ${tabContentDefaultActive == a ? "idc-visible-content" : ""} idc-non-color`} style={tabIndividualTemplateType[a] == "mosaic" ? {width:"90%", justifyContent:"space-around"} : null}>
                  {
                     content.map((content, c) => {
                        return(
                           tabIndividualTemplateType[a] == "mosaic" ? 
                           <div onClick={() =>  {onElementClick(c, "mosaic", tabsContent[c], ".idc-mosaic-elemnts", "idc-option-active")}} className={`idc-mosaic-elemnts ${tabContentDefaultActive == c ? "idc-option-active" : ""}`} style={{width: (100/tabMosaicImages.length + 10) + "%"}}>
                              <img src={tabMosaicImages[c]}/>
                              <div key={c} className={`idc-tab-${tabIndividualTemplateType[a]} ${tabContentDefaultActive == c ? "idc-option-active-non-color" : ""}`}>{content}</div>
                           </div>
                           :
                           <div key={c} className={`idc-tab-${tabIndividualTemplateType[a]} ${tabContentDefaultActive == c ? "idc-option-active-non-color" : ""}`} onClick={() =>  {onElementClick(c, "Size", tabsContent[c], `.idc-tab-${tabIndividualTemplateType[a]}`, "idc-option-active-non-color")}}>{content}</div>
                        )
                     })
                  }
               </div>
            ))
         }

      </div>
      <div className="idc-tabs-footer">
         {
            infoAndDescriptionsPerTab.map((info, d) => (
               Array.isArray(info) ? 
                  info.map((description, e) => {
                     return(
                        <div className={`idc-product-info ${tabContentDefaultActive == d && description? "idc-product-info-visible" : ""}`} key={e}>{description}</div>
                     )
                  })
               :
               <div className={`idc-product-info ${info ? "idc-visible" : ""}`} key={d}>{info}</div>
            ))
         }
      </div>
    </div>
   )
}
export default TabNavbar;  





--> ****************************************** what this return does basically is to hide and shoe elemnts in the right column content in this case tabNavbar also calls the function to trigger threekit rules